const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const path = require('path');
const fs = require('fs');

function createWindow() {
    const win = new BrowserWindow({
        width: 800,
        height: 600,
        show: false,
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'),
            contextIsolation: true,
            enableRemoteModule: false,
            nodeIntegration: false,
        },
    });

    win.loadFile('index.html');

    win.once('ready-to-show', () => {
        win.show();
    });

    win.webContents.on('did-finish-load', () => {
        let initialFormsData = {message: 'Just an output test'};
        // Envia os dados para o processo de renderização
        win.webContents.send('initial-data', initialFormsData);
    });

    // ipcMain.handle('dialog:openFile', async () => {
    //     const result = await dialog.showOpenDialog({
    //         properties: ['openFile'],
    //         filters: [
    //             { name: 'JSON Files', extensions: ['json'] },
    //             { name: 'All Files', extensions: ['*'] }
    //         ]
    //     });
    //     return result.filePaths[0];
    // });

    // ipcMain.handle('file:loadData', async (event, filePath) => {
    //     return new Promise((resolve, reject) => {
    //         fs.readFile(filePath, 'utf-8', (err, data) => {
    //             if (err) {
    //                 reject(err);
    //             } else {
    //                 try {
    //                     const jsonData = JSON.parse(data);
    //                     resolve(jsonData);
    //                 } catch (parseError) {
    //                     reject(parseError);
    //                 }
    //             }
    //         });
    //     });
    // });

    // ipcMain.handle('dialog:saveFile', async () => {
    //     const result = await dialog.showSaveDialog({
    //         filters: [
    //             { name: 'JSON Files', extensions: ['json'] },
    //             { name: 'All Files', extensions: ['*'] }
    //         ]
    //     });
    //     return result.filePath;
    // });

    // ipcMain.handle('file:saveData', async (event, filePath, data) => {
    //     return new Promise((resolve, reject) => {
    //         fs.writeFile(filePath, data, 'utf-8', (err) => {
    //             if (err) {
    //                 reject(err);
    //             } else {
    //                 resolve();
    //             }
    //         });
    //     });
    // });
}

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});
